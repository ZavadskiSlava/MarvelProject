{"version":3,"file":"static/js/240.371f8687.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBounadry.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/useMarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        dispalay: \"block\",\r\n        margin: \"0 auto\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n      }}\r\n      src={img}\r\n      alt=\"error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from \"react\";\nimport \"./randomChar.scss\";\nimport Spiner from \"../spiner/Spiner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/useMarvelService\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateCharacter();\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateCharacter = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharacter(id).then(onCharLoaded);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spiner /> : null;\n  const content = !(error || loading) ? <Viev char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {errorMessage}\n      {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button className=\"button button__main\">\n          <div className=\"inner\" onClick={updateCharacter}>\n            try it\n          </div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\nconst Viev = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n  const chageDescription = (str) => {\n    if (!str) {\n      return \"There is no information about this hero\";\n    }\n    if (str.length > 221) {\n      let newStr = str.slice(0, 217) + \"...\";\n      return newStr;\n    } else {\n      return str;\n    }\n  };\n\n  const changePic = (pic) => {\n    if (\n      pic ===\n      \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n    ) {\n      return (\n        <img\n          src={pic}\n          alt=\"Random character\"\n          className=\"randomchar__img\"\n          style={{ objectFit: \"contain\" }}\n        />\n      );\n    } else {\n      return (\n        <img src={pic} alt=\"Random character\" className=\"randomchar__img\" />\n      );\n    }\n  };\n\n  return (\n    <div className=\"randomchar__block\">\n      {changePic(thumbnail)}\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{chageDescription(description)}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\nimport useMarvelService from \"../../services/useMarvelService\";\nimport Spiner from \"../spiner/Spiner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n  const [chars, setChars] = useState([]);\n  const [newCharLoading, setNewCharLoading] = useState(false);\n  const [offset, setOffset] = useState(215);\n  const [charEnd, setCharEnd] = useState(false);\n  const [inProp, setInProp] = useState(false);\n\n  const { loading, error, getAllCharaters, clearError } = useMarvelService();\n\n  useEffect(\n    () => {\n      onRequest(offset, true);\n    },\n    // eslint-disable-next-line\n    []\n  );\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewCharLoading(false) : setNewCharLoading(true);\n    clearError();\n    getAllCharaters(offset).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (newChars) => {\n    let ended = false;\n    if (newChars.length < 9) {\n      ended = true;\n    }\n\n    setChars([...chars, ...newChars]);\n\n    setNewCharLoading(false);\n    setOffset((offset) => offset + 9);\n    setCharEnd(ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  function renderChars(chars) {\n    let items = chars.map((char, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        char.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"unset\" };\n      }\n      return (\n        <CSSTransition in={inProp} classNames=\"char__item\" timeout={500}>\n          <li\n            className=\"char__item\"\n            key={i}\n            tabIndex={0}\n            ref={(item) => (itemRefs.current[i] = item)}\n            onClick={() => {\n              props.onCharSelected(char.id);\n              focusOnItem(i);\n            }}\n            onKeyPress={(e) => {\n              if (e.key === \" \" || e.key === \"Enter\") {\n                props.onCharSelected(char.id);\n                focusOnItem(i);\n              }\n            }}\n          >\n            <img src={char.thumbnail} alt={char.name} style={imgStyle} />\n            <div className=\"char__name\">{char.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n    return <TransitionGroup component={null}>{items}</TransitionGroup>;\n  }\n\n  const items = renderChars(chars);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newCharLoading ? <Spiner /> : null;\n\n  return (\n    <div className=\"char__list\">\n      <ul className=\"char__grid\">\n        {errorMessage}\n        {spinner}\n        {items}\n      </ul>\n\n      <button\n        className=\"button button__main button__long\"\n        disabled={newCharLoading}\n        style={{ display: charEnd ? \"none\" : \"block\" }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from \"react\";\nimport Spiner from \"../spiner/Spiner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\nimport useMarvelService from \"../../services/useMarvelService\";\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n    clearError();\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spiner /> : null;\n  const content = !(loading || error || !char) ? <Viev char={char} /> : null;\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  );\n};\n\nconst Viev = ({ char }) => {\n  const { name, thumbnail, homepage, wiki, description, comics } = char;\n  const chageDescription = (str) => {\n    if (!str) {\n      return \"There is no information about this hero\";\n    }\n    if (str.length > 221) {\n      let newStr = str.slice(0, 217) + \"...\";\n      return newStr;\n    } else {\n      return str;\n    }\n  };\n\n  const changePic = (pic) => {\n    if (\n      pic ===\n      \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n    ) {\n      return <img src={pic} alt={name} style={{ objectFit: \"contain\" }} />;\n    } else {\n      return <img src={pic} alt={name} />;\n    }\n  };\n\n  const rendComics = (com) => {\n    if (com[0]) {\n      let item = com.map((item, i) => {\n        // eslint-disable-next-line\n        if (i > 10) return;\n        return (\n          <li key={i} className=\"char__comics-item\">\n            {item.name}\n          </li>\n        );\n      });\n      return item;\n    } else {\n      return (\n        <li className=\"char__comics-item\">No comics about this character</li>\n      );\n    }\n  };\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        {changePic(thumbnail)}\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{chageDescription(description)}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">{rendComics(comics)}</ul>\n    </>\n  );\n};\n\nexport default CharInfo;\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBounadry extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBounadry;\r\n","import { useState } from \"react\";\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/useMarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"./charSearchForm.scss\";\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n    console.log(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name).then(onCharLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? (\r\n    <div className=\"char__search-critical-error\">\r\n      <ErrorMessage />\r\n    </div>\r\n  ) : null;\r\n\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">\r\n        There is! Visit {char[0].name} page?\r\n      </div>\r\n      <Link\r\n        to={`/characters/${char[0].id}`}\r\n        className=\"button button__secondary\"\r\n      >\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: \"\",\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required(\"This field is required\"),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field\r\n              id=\"charName\"\r\n              name=\"charName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className=\"button button__main\"\r\n              disabled={loading}\r\n            >\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage\r\n            component=\"div\"\r\n            className=\"char__search-error\"\r\n            name=\"charName\"\r\n          />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBounadry from \"../errorBoundary/ErrorBounadry\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = (props) => {\r\n  const [selectedChar, setSelectedChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setSelectedChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBounadry>\r\n        <RandomChar />\r\n      </ErrorBounadry>\r\n      <div className=\"char__content\">\r\n        <ErrorBounadry>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBounadry>\r\n        <div>\r\n          <ErrorBounadry>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBounadry>\r\n          <ErrorBounadry>\r\n            <CharSearchForm />\r\n          </ErrorBounadry>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=0b5960b3a92dc2ad5723d97f041010b0\";\r\n  const _baseCharOffset = 215;\r\n  const _baseComicsOffset = 215;\r\n\r\n  const getAllCharaters = async (offset = _baseCharOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description,\r\n      thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const getAllComics = async (offset = _baseComicsOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComics = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformComics = (com) => {\r\n    return {\r\n      id: com.id,\r\n      title: com.title,\r\n      price: com.prices[0].price ? `${com.prices[0].price}$` : \"not available\",\r\n      thumbnail: `${com.thumbnail.path}.${com.thumbnail.extension}`,\r\n      url: com.resourceURI,\r\n      description: com.description || \"There is no description\",\r\n      pageCount: com.pageCount\r\n        ? `${com.pageCount} pages`\r\n        : \"No information about the number of pages\",\r\n      language: com.textObjects.language || \"en-us\",\r\n    };\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharaters,\r\n    getCharacter,\r\n    clearError,\r\n    getAllComics,\r\n    getComics,\r\n    getCharacterByName,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n        if (!response.ok) {\r\n          throw new Error(`Cloud not fetch ${url}, status ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n  const clearError = useCallback(() => setError(null), []);\r\n  return { loading, error, request, clearError };\r\n};\r\n"],"names":["style","dispalay","margin","width","height","objectFit","src","img","alt","Viev","str","pic","char","name","description","thumbnail","homepage","wiki","className","length","slice","href","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateCharacter","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spiner","content","onClick","mjolnir","props","chars","setChars","newCharLoading","setNewCharLoading","offset","setOffset","charEnd","setCharEnd","inProp","getAllCharaters","onRequest","initial","newChars","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","map","i","imgStyle","CSSTransition","in","classNames","timeout","tabIndex","ref","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderChars","disabled","display","com","comics","updateChar","charId","skeleton","ErrorBounadry","state","errorInfo","this","setState","children","Component","getCharacterByName","console","log","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","selectedChar","setSelectedChar","Helmet","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","path","extension","urls","getAllComics","_transformComics","getComics","title","price","prices","resourceURI","pageCount","language","textObjects"],"sourceRoot":""}